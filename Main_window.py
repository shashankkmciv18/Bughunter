# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from  Connect_window import Ui_Dialog
import webbrowser as wb
initial='www.google.com/search?q='

class Ui_Rookie_tool(object):
    def Windows(self):
        self.window=QtWidgets.QMainWindow()
        self.ui =Ui_Dialog()
        self.ui.setupUi(self.window)
        self.window.show()
    def setupUi(self, Rookie_tool):
        Rookie_tool.setObjectName("Rookie_tool")
        Rookie_tool.resize(975, 293)
        self.centralwidget = QtWidgets.QWidget(Rookie_tool)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.pb35 = QtWidgets.QPushButton(self.centralwidget)
        self.pb35.setObjectName("pb35")
        self.gridLayout.addWidget(self.pb35, 6, 6, 1, 1)
        self.pb34 = QtWidgets.QPushButton(self.centralwidget)
        self.pb34.setObjectName("pb34")
        self.gridLayout.addWidget(self.pb34, 5, 6, 1, 1)
        self.pb30 = QtWidgets.QPushButton(self.centralwidget)
        self.pb30.setObjectName("pb30")
        self.gridLayout.addWidget(self.pb30, 6, 5, 1, 1)
        self.pb9 = QtWidgets.QPushButton(self.centralwidget)
        self.pb9.setObjectName("pb9")
        self.gridLayout.addWidget(self.pb9, 5, 1, 1, 1)
        self.pb6 = QtWidgets.QPushButton(self.centralwidget)
        self.pb6.setObjectName("pb6")
        self.gridLayout.addWidget(self.pb6, 2, 1, 1, 1)
        self.pb12 = QtWidgets.QPushButton(self.centralwidget)
        self.pb12.setObjectName("pb12")
        self.gridLayout.addWidget(self.pb12, 3, 2, 1, 1)
        self.pb3 = QtWidgets.QPushButton(self.centralwidget)
        self.pb3.setObjectName("pb3")
        self.gridLayout.addWidget(self.pb3, 4, 0, 1, 1)
        self.pb8 = QtWidgets.QPushButton(self.centralwidget)
        self.pb8.setObjectName("pb8")
        self.gridLayout.addWidget(self.pb8, 4, 1, 1, 1)
        self.pb11 = QtWidgets.QPushButton(self.centralwidget)
        self.pb11.setObjectName("pb11")
        self.gridLayout.addWidget(self.pb11, 2, 2, 1, 1)
        self.pb37 = QtWidgets.QPushButton(self.centralwidget)
        self.pb37.setObjectName("pb37")
        self.gridLayout.addWidget(self.pb37, 3, 7, 1, 1)
        self.pb33 = QtWidgets.QPushButton(self.centralwidget)
        self.pb33.setObjectName("pb33")
        self.gridLayout.addWidget(self.pb33, 4, 6, 1, 1)
        self.pb7 = QtWidgets.QPushButton(self.centralwidget)
        self.pb7.setObjectName("pb7")
        self.gridLayout.addWidget(self.pb7, 3, 1, 1, 1)
        self.pb1 = QtWidgets.QPushButton(self.centralwidget)
        self.pb1.setObjectName("pb1")
        
        self.gridLayout.addWidget(self.pb1, 2, 0, 1, 1)
        self.pb28 = QtWidgets.QPushButton(self.centralwidget)
        self.pb28.setObjectName("pb28")
        self.gridLayout.addWidget(self.pb28, 4, 5, 1, 1)
        self.pb25 = QtWidgets.QPushButton(self.centralwidget)
        self.pb25.setObjectName("pb25")
        self.gridLayout.addWidget(self.pb25, 6, 4, 1, 1)
        self.SearchBar = QtWidgets.QLineEdit(self.centralwidget)
        self.SearchBar.setEnabled(True)
        self.SearchBar.setText("Type Here")
        self.SearchBar.setObjectName("SearchBar")
        self.gridLayout.addWidget(self.SearchBar, 1, 0, 1, 7)
        self.pb22 = QtWidgets.QPushButton(self.centralwidget)
        self.pb22.setObjectName("pb22")
        self.gridLayout.addWidget(self.pb22, 3, 4, 1, 1)
        self.pb39 = QtWidgets.QPushButton(self.centralwidget)
        self.pb39.setObjectName("pb39")
        self.gridLayout.addWidget(self.pb39, 5, 7, 1, 1)
        self.pb19 = QtWidgets.QPushButton(self.centralwidget)
        self.pb19.setObjectName("pb19")
        self.gridLayout.addWidget(self.pb19, 5, 3, 1, 1)
        self.pb2 = QtWidgets.QPushButton(self.centralwidget)
        self.pb2.setObjectName("pb2")
        self.gridLayout.addWidget(self.pb2, 3, 0, 1, 1)
        self.pb29 = QtWidgets.QPushButton(self.centralwidget)
        self.pb29.setObjectName("pb29")
        self.gridLayout.addWidget(self.pb29, 5, 5, 1, 1)
        self.pb40 = QtWidgets.QPushButton(self.centralwidget)
        self.pb40.setObjectName("pb40")
        self.gridLayout.addWidget(self.pb40, 6, 7, 1, 1)
        self.pb13 = QtWidgets.QPushButton(self.centralwidget)
        self.pb13.setObjectName("pb13")
        self.gridLayout.addWidget(self.pb13, 4, 2, 1, 1)
        self.pb27 = QtWidgets.QPushButton(self.centralwidget)
        self.pb27.setObjectName("pb27")
        self.gridLayout.addWidget(self.pb27, 3, 5, 1, 1)
        self.pb5 = QtWidgets.QPushButton(self.centralwidget)
        self.pb5.setObjectName("pb5")
        self.gridLayout.addWidget(self.pb5, 6, 0, 1, 1)
        self.pb10 = QtWidgets.QPushButton(self.centralwidget)
        self.pb10.setObjectName("pb10")
        self.gridLayout.addWidget(self.pb10, 6, 1, 1, 1)
        self.pb23 = QtWidgets.QPushButton(self.centralwidget)
        self.pb23.setObjectName("pb23")
        self.gridLayout.addWidget(self.pb23, 4, 4, 1, 1)
        self.pb21 = QtWidgets.QPushButton(self.centralwidget)
        self.pb21.setObjectName("pb21")
        self.gridLayout.addWidget(self.pb21, 2, 4, 1, 1)
        self.pb14 = QtWidgets.QPushButton(self.centralwidget)
        self.pb14.setObjectName("pb14")
        self.gridLayout.addWidget(self.pb14, 5, 2, 1, 1)
        self.pb18 = QtWidgets.QPushButton(self.centralwidget)
        self.pb18.setObjectName("pb18")
        self.gridLayout.addWidget(self.pb18, 4, 3, 1, 1)
        self.pb17 = QtWidgets.QPushButton(self.centralwidget)
        self.pb17.setObjectName("pb17")
        self.gridLayout.addWidget(self.pb17, 3, 3, 1, 1)
        self.pb15 = QtWidgets.QPushButton(self.centralwidget)
        self.pb15.setObjectName("pb15")
        self.gridLayout.addWidget(self.pb15, 6, 2, 1, 1)
        self.pb32 = QtWidgets.QPushButton(self.centralwidget)
        self.pb32.setObjectName("pb32")
        self.gridLayout.addWidget(self.pb32, 3, 6, 1, 1)
        self.Contact = QtWidgets.QPushButton(self.centralwidget)
        self.Contact.setObjectName("Contact")
        self.gridLayout.addWidget(self.Contact, 1, 7, 1, 1)
        self.pb16 = QtWidgets.QPushButton(self.centralwidget)
        self.pb16.setObjectName("pb16")
        self.gridLayout.addWidget(self.pb16, 2, 3, 1, 1)
        self.pb38 = QtWidgets.QPushButton(self.centralwidget)
        self.pb38.setObjectName("pb38")
        self.gridLayout.addWidget(self.pb38, 4, 7, 1, 1)
        self.pb36 = QtWidgets.QPushButton(self.centralwidget)
        self.pb36.setObjectName("pb36")
        self.gridLayout.addWidget(self.pb36, 2, 7, 1, 1)
        self.pb20 = QtWidgets.QPushButton(self.centralwidget)
        self.pb20.setObjectName("pb20")
        self.gridLayout.addWidget(self.pb20, 6, 3, 1, 1)
        self.pb26 = QtWidgets.QPushButton(self.centralwidget)
        self.pb26.setObjectName("pb26")
        self.gridLayout.addWidget(self.pb26, 2, 5, 1, 1)
        self.pb4 = QtWidgets.QPushButton(self.centralwidget)
        self.pb4.setObjectName("pb4")
        self.gridLayout.addWidget(self.pb4, 5, 0, 1, 1)
        self.pb24 = QtWidgets.QPushButton(self.centralwidget)
        self.pb24.setObjectName("pb24")
        self.gridLayout.addWidget(self.pb24, 5, 4, 1, 1)
        self.pb31 = QtWidgets.QPushButton(self.centralwidget)
        self.pb31.setObjectName("pb31")
        self.gridLayout.addWidget(self.pb31, 2, 6, 1, 1)
        Rookie_tool.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Rookie_tool)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 975, 26))
        self.menubar.setObjectName("menubar")
        Rookie_tool.setMenuBar(self.menubar)
        self.toolBar = QtWidgets.QToolBar(Rookie_tool)
        self.toolBar.setObjectName("toolBar")
        Rookie_tool.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.statusbar = QtWidgets.QStatusBar(Rookie_tool)
        self.statusbar.setObjectName("statusbar")
        Rookie_tool.setStatusBar(self.statusbar)
        self.pb1.clicked.connect(self.google_search)
        self.pb2.clicked.connect(self.get_apache_config_files)
        self.pb3.clicked.connect(self.get_php_info)
        self.pb4.clicked.connect(self.gitlab)
        self.pb5.clicked.connect(self.digital_ocean)
        self.pb6.clicked.connect(self.digital_ocean)
        self.pb7.clicked.connect(self.cencys_domain_check)
        self.pb8.clicked.connect(self.sql_map)
        self.pb9.clicked.connect(self.search_stack_overflow)
        self.pb10.clicked.connect(self.get_paste_bin_entries)
        self.pb11.clicked.connect(self.database_config)
        self.pb12.clicked.connect(self.get_publicly_exposed_docs)
        self.pb13.clicked.connect(self.get_linkedin)
        self.pb14.clicked.connect(self.find_swf_yandex)
        self.pb15.clicked.connect(self.test_cross_domain)
        self.pb16.clicked.connect(self.database_config)
        self.pb17.clicked.connect(self.get_backdoors)
        self.pb18.clicked.connect(self.find_sub_domains)
        self.pb19.clicked.connect(self.wayback_1)
        self.pb20.clicked.connect(self.search_in_shodan)
        self.pb21.clicked.connect(self.get_wordpress_files)
        self.pb22.clicked.connect(self.get_install_or_setup_files)
        self.pb23.clicked.connect(self.search_reddit)
        self.pb24.clicked.connect(self.Amazon_s3_bucket)
        self.pb25.clicked.connect(self.open_bug_bounty)

        self.pb26.clicked.connect(self.ct_logs_search)
        self.pb27.clicked.connect(self.software_download)
        self.pb28.clicked.connect(self.password_leaks)
        self.pb29.clicked.connect(self.traffic_analyse)
        self.pb30.clicked.connect(self.nmap)
        self.pb31.clicked.connect(self.get_backup_and_old_files)
        self.pb32.clicked.connect(self.get_open_redirects)
        self.pb33.clicked.connect(self.Treakfik)
        self.pb34.clicked.connect(self.sql_map)
        self.pb35.clicked.connect(self.dns_info)
        self.pb36.clicked.connect(self.get_sql_errors)
        self.pb37.clicked.connect(self.private_proxies)
        self.pb38.clicked.connect(self.get_domain_eye_reverse_ns_lookups)
        self.pb39.clicked.connect(self.encoder_decoder)
        self.pb40.clicked.connect(self.tempmail)
        self.Contact.clicked.connect(self.linkedin)

        
        
        
        
        
        
         
        
        
        








        self.retranslateUi(Rookie_tool)
        QtCore.QMetaObject.connectSlotsByName(Rookie_tool)

    def retranslateUi(self, Rookie_tool):
        _translate = QtCore.QCoreApplication.translate
        Rookie_tool.setWindowTitle(_translate("Rookie_tool", "Rookie_Tool"))
        self.pb35.setText(_translate("Rookie_tool", "DNS Search"))
        self.pb34.setText(_translate("Rookie_tool", "SQL Map"))
        self.pb30.setText(_translate("Rookie_tool", "Online Nmap"))
        self.pb9.setText(_translate("Rookie_tool", "Stackoverflow"))
        self.pb6.setText(_translate("Rookie_tool", "Directory Listing"))
        self.pb12.setText(_translate("Rookie_tool", "Exposed Docs"))
        self.pb3.setText(_translate("Rookie_tool", "phpinfo()"))
        self.pb8.setText(_translate("Rookie_tool", "SQL MAP"))
        self.pb11.setText(_translate("Rookie_tool", "Config Files"))
        self.pb37.setText(_translate("Rookie_tool", "Private Proxies"))
        self.pb33.setText(_translate("Rookie_tool", "Treak fik"))
        self.pb7.setText(_translate("Rookie_tool", "Cencys Domain\n Check"))
        self.pb1.setText(_translate("Rookie_tool", "Google Search"))
        self.pb28.setText(_translate("Rookie_tool", "Password Leaks"))
        self.pb25.setText(_translate("Rookie_tool", "Bug bounty programs"))
        self.pb22.setText(_translate("Rookie_tool", "Setup Files"))
        self.pb39.setText(_translate("Rookie_tool", "Encoder/Decoder"))
        self.pb19.setText(_translate("Rookie_tool", "Wayback Machine"))
        self.pb2.setText(_translate("Rookie_tool", "Apache Config "))
        self.pb29.setText(_translate("Rookie_tool", "Traffic Analyzer"))
        self.pb40.setText(_translate("Rookie_tool", "Tempmails"))
        self.pb13.setText(_translate("Rookie_tool", "Linked Employees"))
        self.pb27.setText(_translate("Rookie_tool", "Cracked Soft."))
        self.pb5.setText(_translate("Rookie_tool", "Digital Ocean"))
        self.pb10.setText(_translate("Rookie_tool", "Pastebin Entries"))
        self.pb23.setText(_translate("Rookie_tool", "Reddit Search"))
        self.pb21.setText(_translate("Rookie_tool", "Wordpress"))
        self.pb14.setText(_translate("Rookie_tool", "Find .SWF files"))
        self.pb18.setText(_translate("Rookie_tool", "Fnd Subdomain"))
        self.pb17.setText(_translate("Rookie_tool", "Backdoors"))
        self.pb15.setText(_translate("Rookie_tool", "TEST XML"))
        self.pb32.setText(_translate("Rookie_tool", "Open Redirects"))
        self.Contact.setText(_translate("Rookie_tool", "Contact Me"))
        self.pb16.setText(_translate("Rookie_tool", "Database Files"))
        self.pb38.setText(_translate("Rookie_tool", "Reverse IP"))
        self.pb36.setText(_translate("Rookie_tool", "Sql Error"))
        self.pb20.setText(_translate("Rookie_tool", "SHODAN Search"))
        self.pb26.setText(_translate("Rookie_tool", "LogFiles"))
        self.pb4.setText(_translate("Rookie_tool", "Git lab"))
        self.pb24.setText(_translate("Rookie_tool", "AWS s3 bucket"))
        self.pb31.setText(_translate("Rookie_tool", "Backups"))
        self.toolBar.setWindowTitle(_translate("Rookie_tool", "toolBar"))
    
    
    def get_data(self):
        data=self.SearchBar.text()
        return data
    # 1.
    def google_search(self):
        data=self.get_data()
        query=initial+data
        wb.open(query)
        print("opened "+data)
    # 2.
    def get_apache_config_files(self):
        data=self.get_data()
        dork=initial
        x='site:"{Shashank}" filetype:config "apache"'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    # 3.
    def get_php_info(self):
        data=self.get_data()
        dork=initial   
        x='site:"{Shashank}" ext:php intitle:phpinfo "published by the PHP Group"'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    # 4.
    def gitlab(self):
        data=self.get_data()
        dork=initial   
        x='inurl:gitlab "{Shashank}"'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    # 5.
    def digital_ocean(self):
        data=self.get_data()
        dork=initial   
        x='site:digitaloceanspaces.com "{Shashank}"'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
 # 6.
    def digital_ocean(self):
        data=self.get_data()
        dork=initial   
        x='site:digitaloceanspaces.com "{Shashank}"'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    #7
    def cencys_domain_check(self):
        data=self.get_data()
        dork=initial
        x='https://censys.io/domain?q={Shashank}'.format(Shashank=data)
        query=x
        wb.open(query)
        print("opened " +query)
    #8 
    def sql_map(self):
        query= 'https://suip.biz/?act=sqlmap'
        wb.open(query)
    
    #9
    def search_stack_overflow(self):
        data=self.get_data()
        # dork=initial   
        x='https://stackoverflow.com/search?q="{Shashank}"'.format(Shashank=data)
        query=x
        wb.open(query)
        print("opened " +query)
    #10
    def get_paste_bin_entries(self):
        data=self.get_data()
        dork=initial   
        x='site:pastebin.com {Shashank}'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    #11 
    
    def database_config(self):
        data=self.get_data()
        dork=initial
        x='intitle:"index of" "database/config"'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)

    
    def get_publicly_exposed_docs(self):
        data=self.get_data()
        dork=initial   
        x='site:{Shashank} ext:doc | ext:docx | ext:odt | ext:pdf | ext:rtf | ext:sxw | ext:psw | ext:ppt | ext:pptx | ext:pps | ext:csv'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    
    def get_linkedin(self):
        data=self.get_data()
        dork=initial   
        x='site:linkedin.com employees {Shashank}'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    #14
    def find_swf_yandex(self):
        data=self.get_Data()
        dork=initial
        x='https://yandex.com/search/?text=site:{Shashank}  mime:swf&lr=10566'.format(Shashank=data)
        query=x
        wb.open(query)
        print("opened " +query)
    #15
    def test_cross_domain(self):
        data=self.get_data()
        dork=initial
        x='{Shashank}/crossdomain.xml'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    #16
    def get_database_files(self):
        data=self.get_data()
        dork=initial
        x='site:{Shashank} ext:sql | ext:dbf | ext:mdb'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    #17
    
    def get_backdoors(self):
        data=self.get_data()
        dork=initial   
        x='site:{Shashank}  inurl:shell | inurl:backdoor | inurl:wso | inurl:cmd | shadow | passwd | boot.ini | inurl:backdoor'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    #18

    def find_sub_domains(self):
        data=self.get_data()
        dork=initial   
        x='site:*.{Shashank}'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    #19
    def wayback_1(self):
        data=self.get_data()
        dork=initial
        x='https://web.archive.org/web/*/{Shashank}/*'.format(Shashank=data)
        query=x
        wb.open(query)
        print("opened " +query)
    #20

    def search_in_shodan(self):
        data=self.get_data()
        dork=initial
        x='https://www.shodan.io/search?query={Shashank}'.format(Shashank=data)
        query=x
        wb.open(query)
        print("opened " +query)
    #21
    
    def get_wordpress_files(self):
        data=self.get_data()
        dork=initial
        x='site:{Shashank} inurl:wp- | inurl:wp-content | inurl:plugins | inurl:uploads | inurl:themes | inurl:download'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    #22
    def get_install_or_setup_files(self):
        data=self.get_data()
        dork=initial   
        x='site:{Shashank}  inurl:readme | inurl:license | inurl:install | inurl:setup | inurl:config'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    #23
    def search_reddit(self):
        data=self.get_data()
        dork=initial
        x='https://www.reddit.com/search/?q={Shashank}'.format(Shashank=data)
        query=x
        wb.open(query)
        print("opened " +query)
    #24
    
    def Amazon_s3_bucket(self):
        data=self.get_data()
        dork=initial
        x='.s3.amazonaws.com "{Shashank}'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    # 25
    def open_bug_bounty(self):
        data=self.get_data()
        dork=initial
        x='https://www.openbugbounty.org/search/?search={Shashank}'.format(Shashank=data)
        query=x
        wb.open(query)
        print("opened " +query)
    #26
    
    def ct_logs_search(data):
        dork=initial
        x='https://crt.sh/?q={Shashank}'.format(Shashank=data)
        query=x
        wb.open(query)
        print("opened " +query)
    #27
    def software_download(self):
        data=self.get_data()
        dork=initial
        x='https://www.thepiratecity.co/?s={Shashank}'.format(Shashank=data)
        query=x
        wb.open(query)
        print("opened " +query)
#28
    def password_leaks(self):
        data=self.get_data()
        dork=initial
        x='intext:"db_database" ext:env intext:"db_password"'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    
    
    # 29
    def traffic_analyse(self):
        data=self.get_data()
        dork=initial
        x='https://www.similarweb.com/website/{Shashank}'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    #30 
    def nmap(self):
        data=self.get_data()
        dork=initial
        x='https://who.is/whois/{Shashank}'.format(Shashank=data)
        query=x
        wb.open(query)
        print("opened " +query)
#31
    def get_backup_and_old_files(self):
        data=self.get_data()
        dork=initial
        x='site:{Shashank} ext:bkf | ext:bkp | ext:bak | ext:old | ext:backup'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    
    #32
    def get_open_redirects(self):
        data=self.get_data()
        dork=initial   
        x='site:{Shashank} inurl:redir | inurl:url | inurl:redirect | inurl:return | inurl:src=http | inurl:r=http'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    # 33
    def Treakfik(self):
        data=self.get_data()
        dork=initial
        x='intitle:traefik inurl:8080/dashboard"{Shashank}"'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    #34
    def sql_map(self):
        data=self.get_data()
        x='https://suip.biz/?act=sqlmap'
        wb.open(x)
    #35
    def dns_info(self):
        data=self.get_data()
        dork=initial
        x='https://viewdns.info/reverseip/?host={Shashank}&t=1'.format(Shashank=data)
        query=x
        wb.open(query)
        print("opened " +query)

    #36
    def get_sql_errors(self):
        data=self.get_data()
        dork=initial
        x='site:{Shashank} intext:"sql syntax near" | intext:"syntax error has occurred" | intext:"incorrect syntax near" | intext:"unexpected end of SQL command" | intext:"Warning: mysql_connect()" | intext:"Warning: mysql_query()" | intext:"Warning: pg_connect()"'.format(Shashank=data)
        query=dork+x
        wb.open(query)
        print("opened " +query)
    #37
    def private_proxies(self):
        data= 'https://soax.com/home?utm_source=google&utm_medium=cpc&utm_campaign=asia2&utm_term=buyproxies&gclid=CjwKCAjw092IBhAwEiwAxR1lRt8XqDG1B3DWhZR087lYjbiGHWa9jlIVo122df1kyCI_74nFw3JETBoCascQAvD_BwE'
        wb.open(data)
    #38
    def get_domain_eye_reverse_ns_lookups(self):
        data=self.get_data()
        x='https://domaineye.com/reverse-ns/{Shashank}'.format(Shashank=data)
        query=x
        wb.open(query)
        print("opened " +query)
    #39
    def encoder_decoder(self):
        data="https://www.base64decode.org/"
        wb.open(data)
    
    def tempmail(self):
        data="https://temp-mail.org/en/"
        wb.open(data)

    def linkedin(self):
        data="https://www.linkedin.com/in/shashank-kumar-9519a9175/"
        wb.open(data)

    

        
        














if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Rookie_tool = QtWidgets.QMainWindow()
    ui = Ui_Rookie_tool()
    ui.setupUi(Rookie_tool)
    Rookie_tool.show()
    sys.exit(app.exec_())
